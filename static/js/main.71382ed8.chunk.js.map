{"version":3,"sources":["components/ContactData/ContactData.module.scss","components/Filter/Filter.module.scss","components/ContactsList/ContactsList.module.scss","components/Container/Container.module.scss","components/Section/Section.module.scss","components/Spinner/Spinner.module.scss","components/ContactsForm/ContactsForm.module.scss","components/Container/Container.js","components/Section/Section.js","redux/phonebook/contacts-actions.js","redux/phonebook/contacts-operations.js","redux/phonebook/contacts-selectors.js","components/ContactsForm/ContactsForm.js","components/ContactData/ContactData.js","components/Spinner/Spinner.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","App.js","redux/phonebook/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","Container","children","style","container","Section","className","section","changeFilter","createAction","fetchContacts","createAsyncThunk","_","a","rejectWithValue","axios","get","data","message","addContact","name","phone","post","deleteContact","id","delete","getContacts","state","phonebook","contacts","getFilter","filter","getSpinner","spinner","ContactsForm","useState","setName","setPhone","contArr","useSelector","dispatch","useDispatch","handleChange","e","currentTarget","value","reset","form","onSubmit","preventDefault","findIndex","item","alert","contactToServer","list","input","type","pattern","title","onChange","placeholder","required","cut","label","htmlFor","button","ContactData","contactObj","number","onClick","target","dataset","key","Spinner","loaderBox","color","height","width","timeout","ContactsList","contactArr","findValue","isLoading","useEffect","tempContactArr","sort","b","localeCompare","toLowerCase","includes","map","Filter","inputValue","setInputValue","App","createReducer","fulfilled","payload","contact","loading","pending","rejected","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","phonebookReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71382ed8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"ContactData_name__LY_lf\",\"number\":\"ContactData_number__3Qsdq\",\"button\":\"ContactData_button__2unh_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__274ft\",\"cut\":\"Filter_cut__1BB00\",\"label\":\"Filter_label__vwwds\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__z1orx\",\"item\":\"ContactsList_item__2k7wc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1L6pD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2SqpZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loaderBox\":\"Spinner_loaderBox__17sVX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsForm_form__2DFTV\",\"list\":\"ContactsForm_list__2-JRv\",\"item\":\"ContactsForm_item__ErkFi\",\"input\":\"ContactsForm_input__3Msbv\",\"cut\":\"ContactsForm_cut__1YlGz\",\"label\":\"ContactsForm_label__Z6DQN\",\"button\":\"ContactsForm_button__1r6Fr\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './Container.module.scss';\n\nconst Container = ({ children }) => {\n  <div className={style.container}>{children}</div>;\n};\n\nexport default Container;\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport style from './Section.module.scss';\n\nconst Section = ({ children }) => {\n  return (\n    <>\n      <section className={style.section}>{children}</section>\n    </>\n  );\n};\n\nexport default Section;\n\nSection.propTypes = {\n  children: PropTypes.array.isRequired,\n};\n","// import { createAction } from '@reduxjs/toolkit';\n\n// export const search = createAction('contactsForm/search');\n\n//===== без createAsyncThunk =====//\n\n// export const addContactRequest = createAction('inputsForm/addContactRequest');\n// export const addContactSuccess = createAction('inputsForm/addContactSuccess');\n// export const addContactError = createAction('inputsForm/addContactError');\n\n// export const fetchContactsRequest = createAction('contactList/fetchContactsRequest');\n// export const fetchContactsSuccess = createAction('contactList/fetchContactsSuccess');\n// export const fetchContactsError = createAction('contactList/fetchContactsError');\n\n// export const delContactRequest = createAction('contactData/delContactRequest');\n// export const delContactSuccess = createAction('contactData/delContactSuccess');\n// export const delContactError = createAction('contactData/delContactError');\n\nimport { createAction } from '@reduxjs/toolkit';\n\n// export const fetchContactsRequest = createAction(\"contact/fetchContactRequest\")\n// export const fetchContactsSuccess = createAction(\"contact/fetchContactSuccess\")\n// export const fetchContactsReject = createAction(\"contact/fetchContactReject\")\n\n// export const addContactRequest = createAction(\"contact/addContactRequest\")\n// export const addContactSuccess = createAction(\"contact/addContactSuccess\")\n// export const addContactReject = createAction(\"contact/addContactReject\")\n\n// export const deleteContactRequest = createAction(\"contact/deleteContactRequest\")\n// export const deleteContactSuccess = createAction(\"contact/deleteContactSuccess\")\n// export const deleteContactReject = createAction(\"contact/deleteContactReject\")\n\nexport const changeFilter = createAction('contact/filter');\n\n//Vanilla redux\n// export const addContact = (id, name, number) => ({\n//   type: types.ADD,\n//   payload: { id, name, number },\n// });\n\n// export const deleteContact = (contactId) => ({\n//   type: types.DELETE,\n//   payload: contactId,\n// });\n\n// export const changeFilter = (value) => ({\n//   type: types.CHANGE_FILTER,\n//   payload: value,\n// });\n","// import { createAsyncThunk } from '@reduxjs/toolkit'; // при использовании createAsyncThunk\n// import axios from 'axios';\n// // import {\n// //   addContactRequest,\n// //   addContactSuccess,\n// //   addContactError,\n// //   fetchContactsRequest,\n// //   fetchContactsSuccess,\n// //   fetchContactsError,\n// //   delContactRequest,\n// //   delContactSuccess,\n// //   delContactError,\n// // } from './contacts-actions';\n// import './contacts-actions';\n\n// // axios.defaults.baseURL = 'http://localhost:4040';\n\n// axios.defaults.baseURL =\n//   'https://61ec3caaf3011500174d2116.mockapi.io/api/dimonLy';\n\n// /*================при использовании createAsyncThunk================*/\n\n// export const addContact = createAsyncThunk(\n//   'contactsForm/addContact',\n//   //====c обработкщй ошибок====//\n//   async ({ name, phone }, { rejectWithValue }) => {\n//     try {\n//       const response = await axios.post('/contacts', { name, phone });\n//       console.log('data: ', response.data);\n//       return response.data;\n//     } catch (error) {\n//       return rejectWithValue(error);\n//     }\n//   },\n\n//   //====без обработки ошибок====//\n//   // async ({name, phone}) => {\n//   //   const response = await axios.post('/contacts', {name, phone});\n//   //   return response.data;\n//   // }\n// );\n\n// export const delContact = createAsyncThunk(\n//   'contactData/delContact',\n//   //====c обработкщй ошибок====//\n//   async (contactId, { rejectWithValue }) => {\n//     try {\n//       const response = await axios.delete(`/contacts/${contactId}`);\n//       //   console.log('id: ', response.data)/\n//       return response.data.id;\n//     } catch (error) {\n//       return rejectWithValue(error);\n//     }\n//   },\n\n//   //====без обработки ошибок====//\n//   // async (contactId) => {\n//   //   const response = await axios.delete(`/contacts/${contactId}`);\n//   //   return response.data.id\n//   // }\n// );\n\n// export const fetchContacts = createAsyncThunk(\n//   'contactList/fetchContacts',\n//   //====c обработкщй ошибок====//\n//   async (_, { rejectWithValue }) => {\n//     try {\n//       const response = await axios.get('/contacts');\n//       // console.log(response.data)\n//       return response.data;\n//     } catch (error) {\n//       return rejectWithValue(error);\n//     }\n//   },\n\n//====без обработки ошибок====//\n// async () => {\n//   const response = await axios.get('/contacts');\n//   return response.data\n// }\n// );\n\n/*================без использования createAsyncThunk================*/\n/*\nexport const addContact = (name, phone) => async dispatch => {\n  const contact = {\n    name,\n    phone,\n  };\n\n  dispatch(addContactRequest());\n  try {\n    const { data } = await axios.post('/contacts', contact);\n    dispatch(addContactSuccess(data));\n  } catch (error) {\n    dispatch(addContactError(error));\n  };\n\n     axios\n        .post('/contacts', contact)\n         .then(({ data }) => dispatch(addContactSuccess(data)))\n         .catch(error => dispatch(addContactError(error)));\n};\n\nexport const fetchContacts = () => async dispatch => {\n    dispatch(fetchContactsRequest());\n    try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error));\n  };\n\n   axios\n     .get('/contacts')\n     .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n    .catch(error => dispatch(fetchContactsError(error)))\n};\n\nexport const delContact = contactId => async dispatch => {\n  dispatch(delContactRequest());\n   try {\n    const { data } = await axios.delete(`/contacts/${contactId}`);\n     dispatch(delContactSuccess(contactId));\n   } catch (error) {\n     dispatch(delContactError(error));\n   }\n\n  axios\n    .delete(`/contacts/${contactId}`)\n    .then(() => dispatch(delContactSuccess(contactId)))\n    .catch(error => dispatch(delContactError(error)));\n};\n*/\n\n// -------00000----------------00000000000\n\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactReject,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactReject,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsReject,\n} from './contacts-actions';\n\nexport const fetchContacts = createAsyncThunk(\n  'contact/fetchContacts',\n  async (_, { rejectWithValue }) => {\n    try {\n      const { data } = await axios.get(\n        'https://61ec3caaf3011500174d2116.mockapi.io/api/dimonly/contacts',\n      );\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  },\n);\n\nexport const addContact = createAsyncThunk(\n  'contact/addContact',\n\n  async (name, phone, { rejectWithValue }) => {\n    try {\n      const { data } = await axios.post(\n        'https://61ec3caaf3011500174d2116.mockapi.io/api/dimonly/contacts',\n        name,\n        phone,\n      );\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  },\n);\n\nexport const deleteContact = createAsyncThunk(\n  'contact/deleteContact',\n\n  async (id, { rejectWithValue }) => {\n    try {\n      const { data } = await axios.delete(\n        `https://61e42cd7fbee6800175eb21d.mockapi.io/contacts/${id}`,\n      );\n\n      return data.id;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  },\n);\n","// export const getContactsItems = state => state.contacts.items;\n// export const getContactsFilter = state => state.contacts.filter;\n// export const getLoadingSpinner = state => state.contacts.loadingSpinner;\n\nexport const getContacts = state => state.phonebook.contacts;\nexport const getFilter = state => state.phonebook.filter;\nexport const getSpinner = state => state.contacts.spinner;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/phonebook/contacts-operations';\nimport { getContacts } from '../../redux/phonebook/contacts-selectors';\nimport style from './ContactsForm.module.scss';\n\nexport default function ContactsForm() {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const contArr = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const contactToServer = ({ name, phone }) =>\n    dispatch(addContact({ name, phone }));\n\n  const handleChange = e => {\n    switch (e.currentTarget.name) {\n      case 'subscriber':\n        setName(e.currentTarget.value);\n        // setId(uuidv4());\n        break;\n      case 'phone':\n        setPhone(e.currentTarget.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (contArr.findIndex(item => item.name === name) !== -1) {\n      return alert(`Абонент с именем ${name} уже существует!`);\n    }\n    if (contArr.findIndex(item => item.phone === phone) !== -1) {\n      return alert(`Такой номер ${phone} уже присвоен другому абоненту!`);\n    }\n    contactToServer({ name, phone });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <>\n      <form className={style.form} onSubmit={handleSubmit}>\n        <ul className={style.list}>\n          <li className={style.item}>\n            <input\n              className={style.input}\n              id=\"name\"\n              type=\"text\"\n              name=\"subscriber\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer!\"\n              value={name}\n              onChange={handleChange}\n              placeholder=\" \"\n              required\n            />\n            <div className={style.cut}></div>\n            <label className={style.label} htmlFor=\"name\">\n              Name\n            </label>\n          </li>\n\n          <li className={style.item}>\n            <input\n              className={style.input}\n              id=\"phone\"\n              type=\"tel\"\n              name=\"phone\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with + !\"\n              value={phone}\n              onChange={handleChange}\n              placeholder=\" \"\n              required\n            />\n            <div className={style.cut}></div>\n            <label className={style.label} htmlFor=\"phone\">\n              Phone\n            </label>\n          </li>\n        </ul>\n\n        <button className={style.button} type=\"submit\">\n          Add Contact\n        </button>\n      </form>\n    </>\n  );\n}\n\nContactsForm.propTypes = {\n  subscriber: PropTypes.string,\n  phone: PropTypes.string,\n};\n\n/*\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport actions from '../../redux/phonebook/actions';\nimport CONFIG from '../../data/formConfig.json';\nimport style from './ContactsForm.module.scss';\n\nexport default function Phonebook() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = ({ target: { name, value } }) => {\n    name === 'name' && setName(value);\n    name === 'number' && setNumber(value);\n  };\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    name && number !== '' && dispatch(actions.addContact(name, number));\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={style.form} onSubmit={handleSubmit}>\n      <ul className={style.list}>\n        {CONFIG.map(field => (\n          <li key={field.name} className={style.item}>\n            <input\n              className={style.input}\n              id={field.type}\n              type={field.type}\n              name={field.name}\n              pattern={field.pattern}\n              title={field.title}\n              value={{ name, number }[field.name]}\n              onChange={handleChange}\n              placeholder=\" \"\n              required\n            />\n            <div className={style.cut}></div>\n            <label className={style.label} htmlFor={field.type}>\n              {field.name}\n            </label>\n          </li>\n        ))}\n      </ul>\n      <button className={style.button} type=\"submit\">\n        Add Contact\n      </button>\n    </form>\n  );\n}\n\nCONFIG.PropTypes = {\n  type: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  pattern: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n*/\n","import PropTypes from 'prop-types';\nimport style from './ContactData.module.scss';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/phonebook/contacts-operations';\n\nconst ContactData = ({ contactObj }) => {\n  const dispatch = useDispatch();\n\n  const onDelContact = e => {\n    dispatch(deleteContact(e.target.dataset.key));\n  };\n\n  const { id, name, phone } = contactObj;\n  return (\n    <>\n      <p className={style.name}>{name}:</p>\n      <p className={style.number}>{phone}</p>\n      <button\n        className={style.button}\n        type={'button'}\n        data-key={id}\n        onClick={onDelContact}\n      >\n        Delete\n      </button>\n    </>\n  );\n};\n\nContactData.propTypes = {\n  name: PropTypes.string,\n  phone: PropTypes.string,\n  id: PropTypes.string,\n};\n\nexport default ContactData;\n","import React from 'react';\nimport Loader from 'react-loader-spinner';\nimport style from './Spinner.module.scss';\n\nconst Spinner = () => {\n  return (\n    <div className={style.loaderBox}>\n      <Loader\n        type=\"Oval\" //Audio Bars BallTriangle Circles Grid Oval Puff Rings TailSpin ThreeDots Hearts\n        color=\"#dadada\"\n        height={90}\n        width={90}\n        timeout={5000} // ms\n      />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  getContacts,\n  getFilter,\n  getSpinner,\n} from '../../redux/phonebook/contacts-selectors';\nimport { fetchContacts } from '../../redux/phonebook/contacts-operations';\nimport ContactData from '../ContactData/ContactData';\n// import FindForm from '../FindForm';\nimport Spinner from '../Spinner/Spinner';\nimport style from './ContactsList.module.scss';\n\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n\n  const contactArr = useSelector(getContacts);\n  const findValue = useSelector(getFilter);\n  const isLoading = useSelector(getSpinner);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const tempContactArr = [...contactArr].sort((a, b) =>\n    a.name.localeCompare(b.name),\n  );\n\n  return (\n    <>\n      {contactArr && (\n        <ul className={style.list}>\n          {tempContactArr\n            .filter(item =>\n              item.name.toLowerCase().includes(findValue.toLowerCase()),\n            )\n            .map(item => {\n              const { id } = item;\n              return (\n                <li key={id} className={style.item}>\n                  <ContactData contactObj={item} />\n                </li>\n              );\n            })}\n        </ul>\n      )}\n\n      {isLoading && <Spinner />}\n    </>\n  );\n};\nexport default ContactsList;\n\nContactsList.propTypes = {\n  id: PropTypes.string,\n};\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { changeFilter } from '../../redux/phonebook/contacts-actions';\nimport style from './Filter.module.scss';\n\nconst Filter = () => {\n  const [inputValue, setInputValue] = useState('');\n  const dispatch = useDispatch();\n  const findValue = value => dispatch(changeFilter(value));\n\n  const handleChange = e => {\n    setInputValue(e.currentTarget.value);\n    findValue(e.currentTarget.value);\n  };\n\n  // const reset = (e) => setInputValue('');\n\n  return (\n    <>\n      <input\n        className={style.input}\n        id=\"filter\"\n        name=\"filter\"\n        type=\"text\"\n        value={inputValue}\n        onChange={handleChange}\n        // onBlur={reset}\n        placeholder=\" \"\n      />\n      <div className={style.cut}></div>\n      <label className={style.label} htmlFor=\"filter\">\n        Find contacts by name\n      </label>\n    </>\n  );\n};\nexport default Filter;\n\nFilter.propTypes = {\n  inputValue: PropTypes.string,\n};\n","import './App.scss';\r\nimport Container from './components/Container/Container';\r\nimport Section from './components/Section/Section';\r\nimport ContactsForm from './components/ContactsForm/ContactsForm';\r\nimport ContactsList from './components/ContactsList/ContactsList';\r\nimport Filter from './components/Filter/Filter';\r\n\r\nexport default function App() {\r\n  return (\r\n    <main className=\"app\">\r\n      <Container>\r\n        <Section>\r\n          <h1 className=\"app-title\">Phonebook</h1>\r\n          <ContactsForm />\r\n        </Section>\r\n\r\n        <Section>\r\n          <h2 className=\"app-title\">Contacts</h2>\r\n          <div className=\"app-container\">\r\n            <Filter />\r\n            <ContactsList />\r\n          </div>\r\n        </Section>\r\n      </Container>\r\n    </main>\r\n  );\r\n}\r\n","// import { combineReducers } from 'redux';\n// import { createReducer } from '@reduxjs/toolkit';\n\n// import { addContact, fetchContacts, delContact } from './contacts-operations';\n// import { search } from './contacts-actions';\n\n// const items = createReducer([], {\n//   //===== c createAsyncThunk =====//\n//   [addContact.fulfilled]: (state, action) => [...state, action.payload], //(state, { payload }) => [...state, payload],\n//   [fetchContacts.fulfilled]: (_, action) => action.payload, // (_, { payload }) => payload,\n//   [delContact.fulfilled]: (state, action) =>\n//     state.filter(({ id }) => id.toString() !== action.payload.toString()),\n// });\n\n// const filter = createReducer('', {\n//   [search]: (_, { payload }) => payload,\n// });\n\n// const loadingSpinner = createReducer(false, {\n//   //===== c createAsyncThunk =====//\n//   [addContact.pending]: () => true,\n//   [addContact.fulfilled]: () => false,\n//   [addContact.rejected]: () => false,\n\n//   [fetchContacts.pending]: () => true,\n//   [fetchContacts.fulfilled]: () => false,\n//   [fetchContacts.rejected]: () => false,\n\n//   [delContact.pending]: () => true,\n//   [delContact.fulfilled]: () => false,\n//   [delContact.rejected]: () => false,\n// });\n\n// export default combineReducers({\n//   items,\n//   filter,\n//   loadingSpinner,\n// });\n\nimport { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactReject,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactReject,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsReject,\n  changeFilter,\n} from './contacts-actions';\nimport {\n  fetchContacts,\n  addContact,\n  deleteContact,\n} from './contacts-operations';\n\nconst contacts = createReducer([], {\n  [fetchContacts.fulfilled]: (_, { payload }) => payload,\n  [addContact.fulfilled]: (state, { payload }) => [payload, ...state],\n  [deleteContact.fulfilled]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContacts.pending]: () => true,\n  [fetchContacts.fulfilled]: () => false,\n  [fetchContacts.rejected]: () => false,\n  [addContact.pending]: () => true,\n  [addContact.fulfilled]: () => false,\n  [addContact.rejected]: () => false,\n  [deleteContact.pending]: () => true,\n  [deleteContact.fulfilled]: () => false,\n  [deleteContact.rejected]: () => false,\n});\n\nexport default combineReducers({\n  contacts,\n  filter,\n  loading,\n});\n\n//Vanilla redux\n// const contacts = (state = initialContacts, { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       return [payload, ...state];\n//     case types.DELETE:\n//       return state.filter((contact) => contact.id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = \"\", { type, payload }) => {\n//   switch (type) {\n//     case types.CHANGE_FILTER:\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n","// ====== ВАРИАНТ с Redux Toolkit, заморочено ======\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport phonebookReducer from './phonebook/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nexport const store = configureStore({\n  reducer: {\n    phonebook: phonebookReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// ======= Vanilla Redux\n// const rootReducer = combineReducers({\n//   phonebook: persistReducer(contactsPersistConfig, phonebookReducer),\n// });\n// const store = createStore(rootReducer, composeWithDevTools());\n\n// import { configureStore } from '@reduxjs/toolkit';\n// import contactsReducer from './phonebook/contacts-reducer';\n\n// const store = configureStore({\n//   reducer: {\n//     contacts: contactsReducer,\n//   },\n// });\n\n// export default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\n\n// import 'modern-normalize/modern-normalize.css';\nimport App from './App';\nimport { store } from './redux/store';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}