{"version":3,"sources":["components/ContactData/ContactData.module.scss","components/Filter/Filter.module.scss","components/ContactsList/ContactsList.module.scss","components/Container/Container.module.scss","components/Section/Section.module.scss","components/Spinner/Spinner.module.scss","components/ContactsForm/ContactsForm.module.scss","components/Container/Container.js","components/Section/Section.js","redux/phonebook/contacts-actions.js","redux/phonebook/contacts-operations.js","redux/phonebook/contacts-selectors.js","components/ContactsForm/ContactsForm.js","components/ContactData/ContactData.js","components/Spinner/Spinner.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","App.js","redux/phonebook/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","Container","children","style","container","Section","className","section","search","createAction","axios","defaults","baseURL","addContact","createAsyncThunk","a","name","phone","rejectWithValue","post","response","data","delContact","contactId","delete","id","fetchContacts","_","get","getContactsItems","state","contacts","items","getContactsFilter","filter","getLoadingSpinner","loadingSpinner","ContactsForm","useState","setName","setPhone","contArr","useSelector","dispatch","useDispatch","handleChange","e","currentTarget","value","reset","form","onSubmit","preventDefault","findIndex","item","alert","contactToServer","list","input","type","pattern","title","onChange","placeholder","required","cut","label","htmlFor","button","ContactData","contactObj","number","onClick","target","dataset","key","Spinner","loaderBox","color","height","width","timeout","ContactsList","contactArr","findValue","isLoadingContacts","useEffect","tempContactArr","sort","b","localeCompare","toLowerCase","includes","map","Filter","inputValue","setinputValue","App","createReducer","fulfilled","action","payload","toString","pending","rejected","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,OAAS,4BAA4B,OAAS,8B,mBCAjGD,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,IAAM,oBAAoB,MAAQ,wB,mBCAlFD,EAAOC,QAAU,CAAC,KAAO,2BAA2B,KAAO,6B,mBCA3DD,EAAOC,QAAU,CAAC,UAAY,+B,mBCA9BD,EAAOC,QAAU,CAAC,QAAU,2B,mBCA5BD,EAAOC,QAAU,CAAC,UAAY,6B,4DCA9BD,EAAOC,QAAU,CAAC,KAAO,2BAA2B,KAAO,2BAA2B,KAAO,2BAA2B,MAAQ,4BAA4B,IAAM,0BAA0B,MAAQ,4BAA4B,OAAS,+B,+HCO1NC,EAJG,SAAC,GAAiB,EAAfC,SACHC,IAAMC,W,iBCMTC,EARC,SAAC,GAAkB,IAAhBH,EAAe,EAAfA,SACjB,OACE,mCACE,yBAASI,UAAWH,IAAMI,QAA1B,SAAoCL,O,wDCJ7BM,EAASC,YAAa,mBCenCC,IAAMC,SAASC,QACb,0DAIK,IAAMC,EAAaC,YACxB,wBADwC,uCAGxC,qCAAAC,EAAA,6DAASC,EAAT,EAASA,KAAMC,EAAf,EAAeA,MAAWC,EAA1B,EAA0BA,gBAA1B,kBAE2BR,IAAMS,KAAK,YAAa,CAAEH,OAAMC,UAF3D,cAEUG,EAFV,yBAIWA,EAASC,MAJpB,yDAMWH,EAAgB,EAAD,KAN1B,yDAHwC,yDAoB7BI,EAAaR,YACxB,yBADwC,uCAGxC,WAAOS,EAAP,oBAAAR,EAAA,6DAAoBG,EAApB,EAAoBA,gBAApB,kBAE2BR,IAAMc,OAAN,oBAA0BD,IAFrD,cAEUH,EAFV,yBAIWA,EAASC,KAAKI,IAJzB,yDAMWP,EAAgB,EAAD,KAN1B,yDAHwC,yDAoB7BQ,EAAgBZ,YAC3B,4BAD2C,uCAG3C,WAAOa,EAAP,oBAAAZ,EAAA,6DAAYG,EAAZ,EAAYA,gBAAZ,kBAE2BR,IAAMkB,IAAI,aAFrC,cAEUR,EAFV,yBAIWA,EAASC,MAJpB,yDAMWH,EAAgB,EAAD,KAN1B,yDAH2C,yDC9DhCW,EAAmB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,OAC3CC,EAAoB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,QAC5CC,EAAoB,SAAAL,GAAK,OAAIA,EAAMC,SAASK,gB,gBCM1C,SAASC,IACtB,MAAwBC,mBAAS,IAAjC,mBAAOtB,EAAP,KAAauB,EAAb,KACA,EAA0BD,mBAAS,IAAnC,mBAAOrB,EAAP,KAAcuB,EAAd,KAGMC,EAAUC,YAAYb,GAEtBc,EAAWC,cAKXC,EAAe,SAAAC,GACnB,OAAQA,EAAEC,cAAc/B,MACtB,IAAK,aACHuB,EAAQO,EAAEC,cAAcC,OAExB,MACF,IAAK,SACHR,EAASM,EAAEC,cAAcC,SAmBzBC,EAAQ,WACZV,EAAQ,IACRC,EAAS,KAGX,OACE,mCACE,uBAAMlC,UAAWH,IAAM+C,KAAMC,SAnBZ,SAAAL,GAEnB,OADAA,EAAEM,kBACqD,IAAnDX,EAAQY,WAAU,SAAAC,GAAI,OAAIA,EAAKtC,OAASA,KACnCuC,MAAM,0FAAD,OAAqBvC,EAArB,uFAE2C,IAArDyB,EAAQY,WAAU,SAAAC,GAAI,OAAIA,EAAKrC,QAAUA,KACpCsC,MAAM,iEAAD,OAAgBtC,EAAhB,uKAvBQ,SAAC,GAAD,IAAGD,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAC/B0B,EAAS9B,EAAW,CAAEG,OAAMC,WAwB5BuC,CAAgB,CAAExC,OAAMC,eACxBgC,MAUE,UACE,qBAAI3C,UAAWH,IAAMsD,KAArB,UACE,qBAAInD,UAAWH,IAAMmD,KAArB,UACE,uBACEhD,UAAWH,IAAMuD,MACjBjC,GAAG,OACHkC,KAAK,OACL3C,KAAK,aACL4C,QAAQ,yHACRC,MAAM,gGACNb,MAAOhC,EACP8C,SAAUjB,EACVkB,YAAY,IACZC,UAAQ,IAEV,qBAAK1D,UAAWH,IAAM8D,MACtB,uBAAO3D,UAAWH,IAAM+D,MAAOC,QAAQ,OAAvC,qBAKF,qBAAI7D,UAAWH,IAAMmD,KAArB,UACE,uBACEhD,UAAWH,IAAMuD,MACjBjC,GAAG,QACHkC,KAAK,MACL3C,KAAK,SACL4C,QAAQ,yFACRC,MAAM,iGACNb,MAAO/B,EACP6C,SAAUjB,EACVkB,YAAY,IACZC,UAAQ,IAEV,qBAAK1D,UAAWH,IAAM8D,MACtB,uBAAO3D,UAAWH,IAAM+D,MAAOC,QAAQ,QAAvC,yBAMJ,wBAAQ7D,UAAWH,IAAMiE,OAAQT,KAAK,SAAtC,8B,8CC5DOU,EA7BK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACf3B,EAAWC,cAKT5B,EAAoBsD,EAApBtD,KAAMS,EAAc6C,EAAd7C,GAAIR,EAAUqD,EAAVrD,MAClB,OACE,qCACE,oBAAGX,UAAWH,IAAMa,KAApB,UAA2BA,EAA3B,OACA,mBAAGV,UAAWH,IAAMoE,OAApB,SAA6BtD,IAC7B,wBACEX,UAAWH,IAAMiE,OACjBT,KAAM,SACN,WAAUlC,EACV+C,QAbgB,SAAA1B,GACpBH,EAASrB,EAAWwB,EAAE2B,OAAOC,QAAQC,OAQnC,wB,kCCESC,EAdC,WACd,OACE,qBAAKtE,UAAWH,IAAM0E,UAAtB,SACE,cAAC,IAAD,CACElB,KAAK,OACLmB,MAAM,UACNC,OAAQ,GACRC,MAAO,GACPC,QAAS,SC4CFC,EA1CM,WACnB,IAAMvC,EAAWC,cAEXuC,EAAazC,YAAYb,GACzBuD,EAAY1C,YAAYT,GACxBoD,EAAoB3C,YAAYP,GAEtCmD,qBAAU,WACR3C,EAASjB,OACR,CAACiB,IACJ,IAAM4C,EAAiB,YAAIJ,GAAYK,MAAK,SAACzE,EAAG0E,GAAJ,OAC1C1E,EAAEC,KAAK0E,cAAcD,EAAEzE,SAGzB,OACE,qCACGmE,GACC,oBAAI7E,UAAWH,IAAMsD,KAArB,SACG8B,EACErD,QAAO,SAAAoB,GAAI,OACVA,EAAKtC,KAAK2E,cAAcC,SAASR,EAAUO,kBAE5CE,KAAI,SAAAvC,GACH,IAAQ7B,EAAO6B,EAAP7B,GACR,OACE,oBAAanB,UAAWH,IAAMmD,KAA9B,SACE,cAAC,EAAD,CAAagB,WAAYhB,KADlB7B,QAQlB4D,GAAqB,cAAC,EAAD,Q,iBCVbS,EA/BA,WACb,MAAoCxD,mBAAS,IAA7C,mBAAOyD,EAAP,KAAmBC,EAAnB,KACMrD,EAAWC,cAUjB,OACE,qCACE,uBACEtC,UAAWH,IAAMuD,MACjBjC,GAAG,SACHT,KAAK,SACL2C,KAAK,OACLX,MAAO+C,EACPjC,SAfe,SAAAhB,GAFH,IAAAE,EAGhBgD,EAAclD,EAAEC,cAAcC,OAHdA,EAINF,EAAEC,cAAcC,MAJDL,EAASnC,EAAOwC,KAmBrCe,YAAY,MAEd,qBAAKzD,UAAWH,IAAM8D,MACtB,uBAAO3D,UAAWH,IAAM+D,MAAOC,QAAQ,SAAvC,uCCxBS,SAAS8B,IACtB,OACE,sBAAM3F,UAAU,MAAhB,SACE,eAAC,EAAD,WACE,eAAC,EAAD,WACE,oBAAIA,UAAU,YAAd,uBACA,cAAC+B,EAAD,OAGF,eAAC,EAAD,WACE,oBAAI/B,UAAU,YAAd,sBACA,sBAAKA,UAAU,gBAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,e,sBCdN0B,EAAQkE,YAAc,IAAD,mBAExBrF,EAAWsF,WAAY,SAACrE,EAAOsE,GAAR,4BAAuBtE,GAAvB,CAA8BsE,EAAOC,aAFpC,cAGxB3E,EAAcyE,WAAY,SAACxE,EAAGyE,GAAJ,OAAeA,EAAOC,WAHxB,cAIxB/E,EAAW6E,WAAY,SAACrE,EAAOsE,GAAR,OACtBtE,EAAMI,QAAO,qBAAGT,GAAY6E,aAAeF,EAAOC,QAAQC,iBALnC,IAQrBpE,EAASgE,YAAc,GAAD,eACzB1F,GAAS,SAACmB,EAAD,YAAM0E,YAGZjE,GAAiB8D,aAAc,GAAD,mBAEjCrF,EAAW0F,SAAU,kBAAM,KAFM,cAGjC1F,EAAWsF,WAAY,kBAAM,KAHI,cAIjCtF,EAAW2F,UAAW,kBAAM,KAJK,cAMjC9E,EAAc6E,SAAU,kBAAM,KANG,cAOjC7E,EAAcyE,WAAY,kBAAM,KAPC,cAQjCzE,EAAc8E,UAAW,kBAAM,KARE,cAUjClF,EAAWiF,SAAU,kBAAM,KAVM,cAWjCjF,EAAW6E,WAAY,kBAAM,KAXI,cAYjC7E,EAAWkF,UAAW,kBAAM,KAZK,IAerBC,eAAgB,CAC7BzE,QACAE,SACAE,oBCzBasE,GANDC,YAAe,CAC3BC,QAAS,CACP7E,SAAU8E,MCCdC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,W","file":"static/js/main.8b2fc390.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"ContactData_name__LY_lf\",\"number\":\"ContactData_number__3Qsdq\",\"button\":\"ContactData_button__2unh_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__274ft\",\"cut\":\"Filter_cut__1BB00\",\"label\":\"Filter_label__vwwds\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__z1orx\",\"item\":\"ContactsList_item__2k7wc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1L6pD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2SqpZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loaderBox\":\"Spinner_loaderBox__17sVX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsForm_form__2DFTV\",\"list\":\"ContactsForm_list__2-JRv\",\"item\":\"ContactsForm_item__ErkFi\",\"input\":\"ContactsForm_input__3Msbv\",\"cut\":\"ContactsForm_cut__1YlGz\",\"label\":\"ContactsForm_label__Z6DQN\",\"button\":\"ContactsForm_button__1r6Fr\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport style from './Container.module.scss';\r\n\r\nconst Container = ({ children }) => {\r\n  <div className={style.container}>{children}</div>;\r\n};\r\n\r\nexport default Container;\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport style from './Section.module.scss';\r\n\r\nconst Section = ({ children }) => {\r\n  return (\r\n    <>\r\n      <section className={style.section}>{children}</section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.array.isRequired,\r\n};\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const search = createAction('findForm/search');\r\n\r\n//===== без createAsyncThunk =====//\r\n\r\n// export const addContactRequest = createAction('inputsForm/addContactRequest');\r\n// export const addContactSuccess = createAction('inputsForm/addContactSuccess');\r\n// export const addContactError = createAction('inputsForm/addContactError');\r\n\r\n// export const fetchContactsRequest = createAction('contactList/fetchContactsRequest');\r\n// export const fetchContactsSuccess = createAction('contactList/fetchContactsSuccess');\r\n// export const fetchContactsError = createAction('contactList/fetchContactsError');\r\n\r\n// export const delContactRequest = createAction('contactData/delContactRequest');\r\n// export const delContactSuccess = createAction('contactData/delContactSuccess');\r\n// export const delContactError = createAction('contactData/delContactError');\r\n","import { createAsyncThunk } from '@reduxjs/toolkit'; // при использовании createAsyncThunk\r\nimport axios from 'axios';\r\n// import {\r\n//   addContactRequest,\r\n//   addContactSuccess,\r\n//   addContactError,\r\n//   fetchContactsRequest,\r\n//   fetchContactsSuccess,\r\n//   fetchContactsError,\r\n//   delContactRequest,\r\n//   delContactSuccess,\r\n//   delContactError,\r\n// } from './contacts-actions';\r\nimport './contacts-actions';\r\n\r\n// axios.defaults.baseURL = 'http://localhost:4040';\r\n\r\naxios.defaults.baseURL =\r\n  'https://6191e46441928b00176901ac.mockapi.io/api/dimonLy';\r\n\r\n/*================при использовании createAsyncThunk================*/\r\n\r\nexport const addContact = createAsyncThunk(\r\n  'inputsForm/addContact',\r\n  //====c обработкщй ошибок====//\r\n  async ({ name, phone }, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.post('/contacts', { name, phone });\r\n      // console.log('data: ', response.data)\r\n      return response.data;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  },\r\n\r\n  //====без обработки ошибок====//\r\n  // async ({name, phone}) => {\r\n  //   const response = await axios.post('/contacts', {name, phone});\r\n  //   return response.data;\r\n  // }\r\n);\r\n\r\nexport const delContact = createAsyncThunk(\r\n  'contactData/delContact',\r\n  //====c обработкщй ошибок====//\r\n  async (contactId, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.delete(`/contacts/${contactId}`);\r\n      //   console.log('id: ', response.data)/\r\n      return response.data.id;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  },\r\n\r\n  //====без обработки ошибок====//\r\n  // async (contactId) => {\r\n  //   const response = await axios.delete(`/contacts/${contactId}`);\r\n  //   return response.data.id\r\n  // }\r\n);\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  'contactList/fetchContacts',\r\n  //====c обработкщй ошибок====//\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.get('/contacts');\r\n      // console.log(response.data)\r\n      return response.data;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  },\r\n\r\n  //====без обработки ошибок====//\r\n  // async () => {\r\n  //   const response = await axios.get('/contacts');\r\n  //   return response.data\r\n  // }\r\n);\r\n\r\n/*================без использования createAsyncThunk================*/\r\n/*\r\nexport const addContact = (name, phone) => async dispatch => {\r\n  const contact = {\r\n    name,\r\n    phone,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n  try {\r\n    const { data } = await axios.post('/contacts', contact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  };\r\n\r\n     axios\r\n        .post('/contacts', contact)\r\n         .then(({ data }) => dispatch(addContactSuccess(data)))\r\n         .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n    try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  };\r\n\r\n   axios\r\n     .get('/contacts')\r\n     .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error)))\r\n};\r\n\r\nexport const delContact = contactId => async dispatch => {\r\n  dispatch(delContactRequest());\r\n   try {\r\n    const { data } = await axios.delete(`/contacts/${contactId}`);\r\n     dispatch(delContactSuccess(contactId));\r\n   } catch (error) {\r\n     dispatch(delContactError(error));\r\n   }\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(delContactSuccess(contactId)))\r\n    .catch(error => dispatch(delContactError(error)));\r\n};\r\n\r\n*/\r\n","export const getContactsItems = state => state.contacts.items;\r\nexport const getContactsFilter = state => state.contacts.filter;\r\nexport const getLoadingSpinner = state => state.contacts.loadingSpinner;\r\n\r\n// export const getContacts = state => state.contacts.items;\r\n// export const getFilter = state => state.contacts.filter;\r\n\r\n// export const getFilteredContacts = state => {\r\n//   const contacts = getContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addContact } from 'redux/phonebook/contacts-operations';\r\n// import CONFIG from '../../data/formConfig.json';\r\nimport { getContactsItems } from 'redux/phonebook/contacts-selectors';\r\nimport style from './ContactsForm.module.scss';\r\n\r\nexport default function ContactsForm() {\r\n  const [name, setName] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n\r\n  // const contArr = useSelector(state => state.contacts.items);\r\n  const contArr = useSelector(getContactsItems);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const contactToServer = ({ name, phone }) =>\r\n    dispatch(addContact({ name, phone }));\r\n\r\n  const handleChange = e => {\r\n    switch (e.currentTarget.name) {\r\n      case 'subscriber':\r\n        setName(e.currentTarget.value);\r\n        // setId(uuidv4());\r\n        break;\r\n      case 'number':\r\n        setPhone(e.currentTarget.value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (contArr.findIndex(item => item.name === name) !== -1) {\r\n      return alert(`Абонент с именем ${name} уже существует!`);\r\n    }\r\n    if (contArr.findIndex(item => item.phone === phone) !== -1) {\r\n      return alert(`Такой номер ${phone} уже присвоен другому абоненту!`);\r\n    }\r\n    contactToServer({ name, phone });\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setPhone('');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className={style.form} onSubmit={handleSubmit}>\r\n        <ul className={style.list}>\r\n          <li className={style.item}>\r\n            <input\r\n              className={style.input}\r\n              id=\"name\"\r\n              type=\"text\"\r\n              name=\"subscriber\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer!\"\r\n              value={name}\r\n              onChange={handleChange}\r\n              placeholder=\" \"\r\n              required\r\n            />\r\n            <div className={style.cut}></div>\r\n            <label className={style.label} htmlFor=\"name\">\r\n              Name\r\n            </label>\r\n          </li>\r\n\r\n          <li className={style.item}>\r\n            <input\r\n              className={style.input}\r\n              id=\"phone\"\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with + !\"\r\n              value={phone}\r\n              onChange={handleChange}\r\n              placeholder=\" \"\r\n              required\r\n            />\r\n            <div className={style.cut}></div>\r\n            <label className={style.label} htmlFor=\"phone\">\r\n              Phone\r\n            </label>\r\n          </li>\r\n        </ul>\r\n\r\n        <button className={style.button} type=\"submit\">\r\n          Add Contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nContactsForm.propTypes = {\r\n  subscriber: PropTypes.string,\r\n  number: PropTypes.string,\r\n};\r\n\r\n/*\r\nimport PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport actions from '../../redux/phonebook/actions';\r\nimport CONFIG from '../../data/formConfig.json';\r\nimport style from './ContactsForm.module.scss';\r\n\r\nexport default function Phonebook() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    name === 'name' && setName(value);\r\n    name === 'number' && setNumber(value);\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    name && number !== '' && dispatch(actions.addContact(name, number));\r\n\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className={style.form} onSubmit={handleSubmit}>\r\n      <ul className={style.list}>\r\n        {CONFIG.map(field => (\r\n          <li key={field.name} className={style.item}>\r\n            <input\r\n              className={style.input}\r\n              id={field.type}\r\n              type={field.type}\r\n              name={field.name}\r\n              pattern={field.pattern}\r\n              title={field.title}\r\n              value={{ name, number }[field.name]}\r\n              onChange={handleChange}\r\n              placeholder=\" \"\r\n              required\r\n            />\r\n            <div className={style.cut}></div>\r\n            <label className={style.label} htmlFor={field.type}>\r\n              {field.name}\r\n            </label>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <button className={style.button} type=\"submit\">\r\n        Add Contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nCONFIG.PropTypes = {\r\n  type: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  pattern: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n};\r\n*/\r\n","import PropTypes from 'prop-types';\r\nimport style from './ContactData.module.scss';\r\nimport { useDispatch } from 'react-redux';\r\nimport { delContact } from 'redux/phonebook/contacts-operations';\r\n\r\nconst ContactData = ({ contactObj }) => {\r\n  const dispatch = useDispatch();\r\n  const deleteContact = e => {\r\n    dispatch(delContact(e.target.dataset.key));\r\n  };\r\n\r\n  const { name, id, phone } = contactObj;\r\n  return (\r\n    <>\r\n      <p className={style.name}>{name}:</p>\r\n      <p className={style.number}>{phone}</p>\r\n      <button\r\n        className={style.button}\r\n        type={'button'}\r\n        data-key={id}\r\n        onClick={deleteContact}\r\n      >\r\n        Delete\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nContactData.propTypes = {\r\n  name: PropTypes.string,\r\n  phone: PropTypes.string,\r\n  id: PropTypes.string,\r\n};\r\n\r\nexport default ContactData;\r\n","import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport style from './Spinner.module.scss';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className={style.loaderBox}>\r\n      <Loader\r\n        type=\"Oval\" //Audio Bars BallTriangle Circles Grid Oval Puff Rings TailSpin ThreeDots Hearts\r\n        color=\"#dadada\"\r\n        height={90}\r\n        width={90}\r\n        timeout={5000} // ms\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  getContactsItems,\r\n  getContactsFilter,\r\n  getLoadingSpinner,\r\n} from 'redux/phonebook/contacts-selectors';\r\nimport { fetchContacts } from 'redux/phonebook/contacts-operations';\r\nimport style from './ContactsList.module.scss';\r\nimport ContactData from '../ContactData/ContactData';\r\n// import FindForm from '../FindForm';\r\nimport Spinner from '../Spinner/Spinner';\r\n\r\nconst ContactsList = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const contactArr = useSelector(getContactsItems);\r\n  const findValue = useSelector(getContactsFilter);\r\n  const isLoadingContacts = useSelector(getLoadingSpinner);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n  const tempContactArr = [...contactArr].sort((a, b) =>\r\n    a.name.localeCompare(b.name),\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {contactArr && (\r\n        <ul className={style.list}>\r\n          {tempContactArr\r\n            .filter(item =>\r\n              item.name.toLowerCase().includes(findValue.toLowerCase()),\r\n            )\r\n            .map(item => {\r\n              const { id } = item;\r\n              return (\r\n                <li key={id} className={style.item}>\r\n                  <ContactData contactObj={item} />\r\n                </li>\r\n              );\r\n            })}\r\n        </ul>\r\n      )}\r\n\r\n      {isLoadingContacts && <Spinner />}\r\n    </>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  id: PropTypes.string,\r\n};\r\n\r\nexport default ContactsList;\r\n\r\n/*\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport contactActions from '../../redux/phonebook/actions';\r\nimport { getFilteredContacts } from '../../redux/phonebook/selectors';\r\nimport style from './ContactsList.module.scss';\r\n\r\nexport default function ContactList() {\r\n  const contacts = useSelector(getFilteredContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <ul className={style.list}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={style.item}>\r\n          <p className={style.name}>{name}:</p>\r\n          <p className={style.number}>{number}</p>\r\n          <button\r\n            className={style.button}\r\n            type=\"button\"\r\n            onClick={() => dispatch(contactActions.deleteContact(id))}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.number.isRequired,\r\n    }),\r\n  ),\r\n};\r\n*/\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { search } from 'redux/phonebook/contacts-actions';\r\nimport style from './Filter.module.scss';\r\n\r\nconst Filter = () => {\r\n  const [inputValue, setinputValue] = useState('');\r\n  const dispatch = useDispatch();\r\n  const findValue = value => dispatch(search(value));\r\n\r\n  const handleChange = e => {\r\n    setinputValue(e.currentTarget.value);\r\n    findValue(e.currentTarget.value);\r\n  };\r\n\r\n  // const reset = (e) => setInputValue('');\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        className={style.input}\r\n        id=\"filter\"\r\n        name=\"filter\"\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleChange}\r\n        // onBlur={reset}\r\n        placeholder=\" \"\r\n      />\r\n      <div className={style.cut}></div>\r\n      <label className={style.label} htmlFor=\"filter\">\r\n        Find contacts by name\r\n      </label>\r\n    </>\r\n  );\r\n};\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  inputValue: PropTypes.string,\r\n};\r\n\r\n/*\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport contactActions from '../../redux/phonebook/actions';\r\nimport { getFilter } from '../../redux/phonebook/selectors';\r\nimport style from './Filter.module.scss';\r\n\r\nexport default function Filter() {\r\n  const contactName = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className={style.container}>\r\n      <input\r\n        className={style.input}\r\n        id=\"filter\"\r\n        name=\"filter\"\r\n        type=\"text\"\r\n        value={contactName}\r\n        onChange={event =>\r\n          dispatch(contactActions.contactsFilter(event.target.value))\r\n        }\r\n        placeholder=\" \"\r\n      />\r\n      <div className={style.cut}></div>\r\n      <label className={style.label} htmlFor=\"filter\">\r\n        Find contacts by name\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n*/\r\n","import './App.scss';\r\nimport Container from './components/Container/Container';\r\nimport Section from './components/Section/Section';\r\nimport ContactsForm from './components/ContactsForm/ContactsForm';\r\nimport ContactsList from './components/ContactsList/ContactsList';\r\nimport Filter from './components/Filter/Filter';\r\n\r\nexport default function App() {\r\n  return (\r\n    <main className=\"app\">\r\n      <Container>\r\n        <Section>\r\n          <h1 className=\"app-title\">Phonebook</h1>\r\n          <ContactsForm />\r\n        </Section>\r\n\r\n        <Section>\r\n          <h2 className=\"app-title\">Contacts</h2>\r\n          <div className=\"app-container\">\r\n            <Filter />\r\n            <ContactsList />\r\n          </div>\r\n        </Section>\r\n      </Container>\r\n    </main>\r\n  );\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nimport { addContact, fetchContacts, delContact } from './contacts-operations';\r\nimport { search } from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  //===== c createAsyncThunk =====//\r\n  [addContact.fulfilled]: (state, action) => [...state, action.payload], //(state, { payload }) => [...state, payload],\r\n  [fetchContacts.fulfilled]: (_, action) => action.payload, // (_, { payload }) => payload,\r\n  [delContact.fulfilled]: (state, action) =>\r\n    state.filter(({ id }) => id.toString() !== action.payload.toString()),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [search]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loadingSpinner = createReducer(false, {\r\n  //===== c createAsyncThunk =====//\r\n  [addContact.pending]: () => true,\r\n  [addContact.fulfilled]: () => false,\r\n  [addContact.rejected]: () => false,\r\n\r\n  [fetchContacts.pending]: () => true,\r\n  [fetchContacts.fulfilled]: () => false,\r\n  [fetchContacts.rejected]: () => false,\r\n\r\n  [delContact.pending]: () => true,\r\n  [delContact.fulfilled]: () => false,\r\n  [delContact.rejected]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loadingSpinner,\r\n});\r\n","// /*=================ВАРИАНТ с Redux Toolkit, как-то очень просто и не заморочено, но работает=================*/\r\n\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport contactsReducer from './phonebook/contacts-reducer';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n\r\n/*=================ВАРИАНТ с Redux Toolkit, как-то заморочено=================*/\r\n\r\n// import { configureStore, getDefaultMiddleware  } from \"@reduxjs/toolkit\";\r\n// import contactsReducer from './contacts/contacts-reducer';\r\n\r\n// /*вариант с OOOOOOOOOOOOOOOOчень замороченой и пока непонятной, но рабочей записью в localStorage*/\r\n\r\n// // import {combineReducers } from '@reduxjs/toolkit';\r\n// import {\r\n//   FLUSH,\r\n//   REHYDRATE,\r\n//   PAUSE,\r\n//   PERSIST,\r\n//   PURGE,\r\n//   REGISTER,\r\n// } from 'redux-persist';\r\n// // import storage from 'redux-persist/lib/storage';  //для записи в локал сторидж\r\n\r\n// const middleware = [\r\n//   ...getDefaultMiddleware({\r\n//     serializableCheck: {\r\n//       ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n//     },\r\n//   }),\r\n// ];\r\n\r\n// // const persistConfig = {\r\n// //     key: 'localStorageContacts',\r\n// //     storage,\r\n// // };\r\n\r\n// // const rootReducer = combineReducers({ contacts: contactsReducer });\r\n\r\n// // const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\n// // const store = configureStore({\r\n// //     reducer: persistedReducer,\r\n// //     middleware,\r\n// //     devTools: process.env.NODE_ENV === 'development' //devTools будет доступно только в процессе разработки (как и надо)\r\n// // });\r\n\r\n// // const persistor = persistStore(store);\r\n\r\n// // const modStore = { store, persistor };\r\n\r\n// // export default modStore;\r\n\r\n// /*вариант с записью в localStorage по \"рабоче-крестьянски\", без заморочек*/\r\n\r\n// // import { configureStore } from \"@reduxjs/toolkit\";\r\n// // import contactsReducer from './contacts/contacts-reducer';\r\n\r\n// const store = configureStore({\r\n//   reducer: { contacts: contactsReducer }, // рутовый (корневой) редюсер создается автоматически под капотом toolkit\r\n//   middleware,\r\n//   devTools: process.env.NODE_ENV === 'development' //devTools будет доступно только в процессе разработки (как и надо)\r\n// })\r\n\r\n// export default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.scss';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport App from './App';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}